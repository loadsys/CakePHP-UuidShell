<?php
/**
 * Tests for the UuidShell class.
 */
namespace UuidShell\Test\TestCase\Shell;

use Cake\Console\ConsoleOptionParser;
use Cake\Console\Shell;
use Cake\TestSuite\TestCase;
use UuidShell\Shell\UuidShell;

/**
 * UuidShellTest class
 *
 */
class UuidShellTest extends TestCase {

	/**
	 * Acts as an accumulator for output produced by the Shell.
	 *
	 * @var array
	 * @see ::initSUIT()
	 */
	public $output = [
	];

	/**
	 * setUp method
	 *
	 * @return void
	 */
	public function setUp() {
		parent::setUp();

		$this->output = [];
		$this->Shell = $this->initSUT();
	}

	/**
	 * tearDown method
	 *
	 * @return void
	 */
	public function tearDown() {
		unset($this->io, $this->Shell);
		$this->output = [];

		parent::tearDown();
	}

	/**
	 * Helper for accumulating I/O output generated by the Shell.
	 *
	 * @param string $s The output string being printed.
	 * @see ::initSUT()
	 */
	public function outputCollector($s, $newlines = 1, $level = Shell::NORMAL) {
		$this->output[] = $s;
	}

	/**
	 * Helper for determing the subject class to initialize for testing.
	 *
	 * Methodology:
	 *   - Take the name of this testing class: `SomeObjectTest`
	 *   - If there exists a `TestSomeObject` class (presumed to extend
	 *     SomeObject to expose private/protected methods for testing)
	 *     then return that.
	 *   - Otherwise, guess the namespace of the subject class by
	 *     removing `*\Test\TestCase\*\*Test` from this testing classes
	 *     name and use that.
	 *   - As a side-effect, set a local class property with the
	 *     non-namespaced `SomeObject` name for future reference in tests.
	 *
	 * @return string The fully-namespaced class name to instantiate.
	 * @see ::initSUT()
	 */
	protected function getSUTClassName() {
		$testCaseClass = '\\' . get_class($this);
			// -> ConfigRead\Test\TestCase\Shell\ConfigReadShellTest

		$testingOverrideClass = preg_replace(
			'/^(.*)\\\([^\\\]+)Test$/',
			'\1\\\Test\2',
			$testCaseClass
		); // -> ConfigRead\Test\TestCase\Shell\TestConfigReadShell

		$testedClass = preg_replace(
			'/^(.*)\\\Test\\\TestCase\\\(.*)Test$/',
			'\1\\\\\2',
			$testCaseClass
		); // -> ConfigRead\Shell\ConfigReadShell

		$this->classBasename = preg_replace(
			'/^.*\\\([^\\\]+)$/',
			'\1',
			$testedClass
		); // -> ConfigReadShell

		return (class_exists($testingOverrideClass) ? $testingOverrideClass : $testedClass);
	}

	/**
	 * Helper for setting up an instance of the target Shell with proper
	 * mocked methods.
	 *
	 * The Shell that will be mocked is taken from the test class name
	 * automatically. Example: `SomeShellTest extends CakeTestCase` will
	 * create a mocked copy of `SomeShell`. Will check for a subclassed
	 * `TestSomeShell` and instantiate that instead, if available, to
	 * allow for overriding protected methods.
	 *
	 * All of the fixtures defined in the test class will be "installed"
	 * into the mocked Shell.
	 *
	 * Typically called in ::setUp() or at the beginning
	 * of a test method (if additional mocked methods are necessary.)
	 *
	 * @return mixed A partially mocked copy of the Shell matching the test class's name.
	 */
	protected function initSUT($additionalMocks = []) {
		$defaultMocks = [
			'_displayHelp', 'error',
		];

		$this->io = $this->getMock('\Cake\Console\ConsoleIo', [], [], '', false);
		$this->io->expects($this->any())
			->method('out')
			->with($this->anything())
			->will($this->returnCallback([$this, 'outputCollector']));


		$class = $this->getSUTClassName();
		$mockedMethods = array_merge($defaultMocks, $additionalMocks);
		$shell = $this->getMock(
			$class,
			$mockedMethods,
			[$this->io]
		);

		$shell->expects($this->any())
			->method('error')
			->with($this->anything())
			->will($this->returnCallback([$this, 'outputCollector']));
		$shell->OptionParser = $this->getMock('\Cake\Console\ConsoleOptionParser', [], [null, false]);
		$shell->params = [
			'help' => false,
			'verbose' => false,
			'quiet' => false,
		];

		return $shell;
	}

	/**
	 * Confirm that startup() engages help output when flag is present.
	 *
	 * @return void
	 */
	public function testWelcome() {
		$this->assertNull(
			$this->Shell->_welcome(),
			'welcome() does nothing but suppress parent output.'
		);
	}
	/**
	 * test main(), crudely.
	 *
	 * @return void
	 */
	public function testMain() {
		$expected = 5;

		$shell = $this->initSUT();
		$shell->args = [$expected];

		$shell->main();

		$this->assertCount(
			$expected,
			$this->output,
			'There should be 5 lines of output.'
		);
	}
}
